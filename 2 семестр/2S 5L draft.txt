#include <iostream>
#include <ctime>
using namespace std;

class Tree {
private:
	struct tNode {
		int data;
		tNode* left;
		tNode* right;

		tNode(int data) {
			this->data = data;
			left = NULL;
			right = NULL;
		}
	};

	tNode* root;

	tNode* setRoot(tNode* newRoot) {
		this->root = newRoot;
		return this->root;
	}

public:
	Tree() {
		root = NULL;
	}
	
	template <typename T>
	int append(T data, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				root = new tNode(data);
				return 0;
			}
			node = root;
		}

		if (data < node->data) {
			if (node->left == NULL) {
				node->left = new tNode(data);
			}
			else {
				append(data, node->left);
			}
		}

		if (data >= node->data) {
			if (node->right == NULL) {
				node->right = new tNode(data);
			}
			else {
				append(data, node->right);
			}
		}

		return 0;
	}

	void print(tNode* node = NULL) {
		if (node == NULL) {
			node = root;
		}

		cout << node->data << " ";

		if (node->left != NULL) {
			print(node->left);
		}

		if (node->right != NULL) {
			print(node->right);
		}

		if (node == root) {
			cout << endl << endl;
		}
	}

	tNode* getRoot() {
		return root;
	}

	template <typename T>
	tNode* deleteNode(T data)
	{
		tNode* ps = getRoot() , * pr = getRoot(), * w = NULL, * v = NULL;

		// Поиск удаляемого узла
		while ((ps != NULL) && (ps->data != data))
		{
			pr = ps;

			if (data < ps->data) {
				ps = ps->left;
			}
			else {
				ps = ps->right;
			}
		}
		if (ps == NULL) return getRoot(); // Если узел не найден

		// Если узел не имеет дочерей
		if ((ps->left == NULL) && (ps->right == NULL))
		{
			if (ps == pr) // Если это был последний элемент
			{
				delete(ps);
				return NULL;
			}

			if (pr->left == ps) { // Если удаляемый узел слева
				pr->left = NULL;
			}
			else { // Если удаляемый узел справа
				pr->right = NULL;
			}

			delete(ps);
			return getRoot();
		}
		// Если узел имеет дочь только справа
		if (ps->left == NULL)
		{
			if (ps == pr) // Если удаляется корень
			{
				ps = ps->right;
				delete(pr);
				return ps;
			}

			if (pr->left == ps) // Если удаляемый узел слева
				pr->left = ps->right;
			else // Если удаляемый узел спава
				pr->right = ps->right;
			delete(ps);
			return getRoot();
		}
		// Если узел имеет дочь только слева
		if (ps->right == NULL) {

			if (ps == pr) { // Если удаляется корень
				ps = ps->left;
				delete(pr);
				return ps;
			}

			if (pr->left == ps) { // Если удаляемый узел слева
				pr->left = ps->left;
			}
			else { // Если удаляемый узел спава
				pr->right = ps->left;
			}

			delete(ps);
			return getRoot();
		}

		// Если узел имеет двух дочерей
		w = ps->left;

		if (w->right == NULL) {// Если максимальный следует за ps
			w->right = ps->right;
		}
		else { // Если максимальный не следует за ps
			while (w->right != NULL) {
				v = w;
				w = w->right;
			}
			v->right = w->left;
			w->left = ps->left;
			w->right = ps->right;
		}

		if (ps == pr) { // Если удаляется корень 
			delete(ps);
			return setRoot(w);
		}

		if (pr->left == ps) {// Если удаляемый узел слева
			pr->left = w;
		}
		else { // Если удаляемый узел справа
			pr->right = w;
		}

		delete(ps);
		return getRoot();
	}

};


int main() {
	setlocale(0, "");
	srand(time(NULL));

	Tree tree = Tree();

	int arr[] = {6, 9, 3, 7, 8, 2, 4, 1, 5, 15, 12, 11, 13};

	for (int i = 0; i < 13; i++) {
		tree.append(arr[i]);
	}

	/*for (int i = 0; i < 30; i++) {
		tree.append(rand() % 100 - 50);
	}*/

	tree.print();
	tree.deleteNode(6);
	tree.print();

	return 0;
}

// Вопросы:
// Есть ли разница, удалять самый правый лист из левого дерева или самый левый лист из правого дерева?