#include <iostream>
using namespace std;

class Map {
private:
	struct tNode {
		string key;
		int count;
		tNode* left, * right;

		tNode(const string& s = "", int n = 0) {
			key = s;
			count = n;
			left = NULL;
			right = NULL;
		}
	};

	tNode* root;

	void setRoot(tNode* newRoot) {
		root = newRoot;
	}

public:
	Map() {
		setRoot(NULL);
	}

	~Map() {
		//deleteTree();
	}

	int& operator[](string str) {
		tNode* temp = searchNode(str);
		if (temp == NULL) {
			temp = append(str);
			return temp->count;
		}
		else {
			temp->count++;
		}
	}

	template <typename T>
	tNode* searchNode(T data, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				return NULL;
			}
			node = root;
		}

		if (node->key == data) {
			return node;
		}

		if (node->left != NULL) {
			tNode* temp = searchNode(data, node->left);
			if (temp != NULL) return temp;
		}

		if (node->right != NULL) {
			tNode* temp = searchNode(data, node->right);
			if (temp != NULL) return temp;
		}

		return NULL;
	}

	template <typename T>
	tNode* append(T data, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				root = new tNode(data);
				return root;
			}
			node = root;
		}

		if (data < node->key) {
			if (node->left == NULL) {
				node->left = new tNode(data);
				return node->left;
			}
			else {
				append(data, node->left);
			}
		}

		if (data >= node->key) {
			if (node->right == NULL) {
				node->right = new tNode(data);
				return node->right;
			}
			else {
				append(data, node->right);
			}
		}

		return root;
	}

	void printTree(tNode* node = NULL) {
		if (node == NULL) {
			node = root;
		}

		if (node->left != NULL) {
			printTree(node->left);
		}

		if (node->right != NULL) {
			printTree(node->right);
		}

		cout << node->key << ": " << node->count << endl;

		if (node == root) {
			cout << endl << endl;
		}
	}
};

int main() {

	Map map;
	cout << map["hello"] << endl;
	map["goodby"];
	cout << map["hello"] << endl;
	map.printTree();


	return 0;
}