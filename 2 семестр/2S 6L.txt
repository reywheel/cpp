#include <iostream>
#include <fstream>
using namespace std;

class Map {
private:
	struct tNode {
		string key;
		int count;
		tNode* left, * right;

		tNode(const string& s = "", int n = 1) {
			key = s;
			count = n;
			left = NULL;
			right = NULL;
		}
	};

	tNode* root;

	tNode* setRoot(tNode* newRoot) {
		root = newRoot;
		return root;
	}

	tNode* getMaxNode(tNode* maxNode = NULL, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				return NULL;
			}
			node = root;
		}

		if (maxNode == NULL) {
			maxNode = new tNode("", 0);
		}

		if (node->count > maxNode->count) {
			maxNode = node;
		}

		if (node->left != NULL) {
			maxNode = getMaxNode(maxNode, node->left);
		}

		if (node->right != NULL) {
			maxNode = getMaxNode(maxNode, node->right);
		}

		return maxNode;
	}

	tNode* getMinNode(tNode* minNode = NULL, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				return NULL;
			}
			node = root;
		}

		if (minNode == NULL) {
			minNode = new tNode("", 99999999999);
		}

		if (node->count < minNode->count) {
			minNode = node;
		}

		if (node->left != NULL) {
			minNode = getMinNode(minNode, node->left);
		}

		if (node->right != NULL) {
			minNode = getMinNode(minNode, node->right);
		}

		return minNode;
	}

public:
	Map() {
		setRoot(NULL);
	}

	~Map() {
		deleteTree();
	}

	tNode* getRoot() {
		return root;
	}

	int& operator[](string str) {
		tNode* temp = searchNode(str);
		if (temp == NULL) {
			temp = append(str);
			return temp->count;
		}
		else {
			temp->count++;
			return temp->count;
		}
	}

	template <typename T>
	tNode* searchNode(T data, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				return NULL;
			}
			node = root;
		}

		if (node->key == data) {
			return node;
		}

		if (node->left != NULL) {
			tNode* temp = searchNode(data, node->left);
			if (temp != NULL) return temp;
		}

		if (node->right != NULL) {
			tNode* temp = searchNode(data, node->right);
			if (temp != NULL) return temp;
		}

		return NULL;
	}

	template <typename T>
	tNode* append(T data, tNode* node = NULL) {
		if (node == NULL) {
			if (root == NULL) {
				root = new tNode(data);
				return root;
			}
			node = root;
		}

		if (data < node->key) {
			if (node->left == NULL) {
				node->left = new tNode(data);
				return node->left;
			}
			else {
				append(data, node->left);
			}
		}

		if (data >= node->key) {
			if (node->right == NULL) {
				node->right = new tNode(data);
				return node->right;
			}
			else {
				append(data, node->right);
			}
		}

		return root;
	}

	void printTree(tNode* node = NULL) {
		if (node == NULL) {
			node = root;
		}

		if (node->left != NULL) {
			printTree(node->left);
		}

		if (node->right != NULL) {
			printTree(node->right);
		}

		cout << node->key << ": " << node->count << endl;

		if (node == root) {
			cout << endl << endl;
		}
	}

	template <typename T>
	tNode* erase(T data)
	{
		tNode* ps = getRoot(), * pr = getRoot(), * w = NULL, * v = NULL;

		// Поиск удаляемого узла
		while ((ps != NULL) && (ps->key != data))
		{
			pr = ps;

			if (data < ps->key) {
				ps = ps->left;
			}
			else {
				ps = ps->right;
			}
		}
		if (ps == NULL) return getRoot(); // Если узел не найден

		// Если узел не имеет дочерей
		if ((ps->left == NULL) && (ps->right == NULL))
		{
			if (ps == pr) // Если это был последний элемент
			{
				delete(ps);
				return NULL;
			}

			if (pr->left == ps) { // Если удаляемый узел слева
				pr->left = NULL;
			}
			else { // Если удаляемый узел справа
				pr->right = NULL;
			}

			delete(ps);
			return getRoot();
		}
		// Если узел имеет дочь только справа
		if (ps->left == NULL)
		{
			if (ps == pr) // Если удаляется корень
			{
				ps = ps->right;
				delete(pr);
				return ps;
			}

			if (pr->left == ps) // Если удаляемый узел слева
				pr->left = ps->right;
			else // Если удаляемый узел спава
				pr->right = ps->right;
			delete(ps);
			return getRoot();
		}
		// Если узел имеет дочь только слева
		if (ps->right == NULL) {

			if (ps == pr) { // Если удаляется корень
				ps = ps->left;
				delete(pr);
				return ps;
			}

			if (pr->left == ps) { // Если удаляемый узел слева
				pr->left = ps->left;
			}
			else { // Если удаляемый узел спава
				pr->right = ps->left;
			}

			delete(ps);
			return getRoot();
		}

		// Если узел имеет двух дочерей
		w = ps->left;

		if (w->right == NULL) {// Если максимальный следует за ps
			w->right = ps->right;
		}
		else { // Если максимальный не следует за ps
			while (w->right != NULL) {
				v = w;
				w = w->right;
			}
			v->right = w->left;
			w->left = ps->left;
			w->right = ps->right;
		}

		if (ps == pr) { // Если удаляется корень 
			delete(ps);
			return setRoot(w);
		}

		if (pr->left == ps) {// Если удаляемый узел слева
			pr->left = w;
		}
		else { // Если удаляемый узел справа
			pr->right = w;
		}

		delete(ps);
		return getRoot();
	}

	void deleteMaxNode() {
		erase(getMaxNode()->key);
	}

	void deleteMinNode() {
		erase(getMinNode()->key);
	}

	void deleteTree(tNode* node = NULL) {
		if (node == NULL) {
			node = getRoot();
		}

		if (node->left != NULL) {
			deleteTree(node->left);
		}

		if (node->right != NULL) {
			deleteTree(node->right);
		}

		delete node;
		if (getRoot() != NULL) {
			setRoot(NULL);
		}
	}
};

int main() {

	ifstream file("file.txt");
	Map map;
	string str;
	while (file >> str) map[str]++;

	map.printTree();
	map.deleteMinNode();
	map.deleteMaxNode();
	map.printTree();
	

	return 0;
}